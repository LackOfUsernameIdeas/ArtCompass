import { FC, Fragment, useEffect, useState } from "react";
import { DataType } from "./readlist-types";
import { fetchData } from "./helper_functions";
import {
  checkRecommendationExistsInReadlist,
  validateToken
} from "../../helper_functions_common";
import { useNavigate } from "react-router-dom";
import FadeInWrapper from "../../../components/common/loader/fadeinwrapper";
import Notification from "../../../components/common/notification/Notification";
import { NotificationState } from "../../types_common";
import BooksTable from "./Components/BooksTable";
import BookmarkAlert from "./Components/BookmarkAlert";
import ErrorCard from "../../../components/common/error/error";

interface ReadlistProps {}

const Readlist: FC<ReadlistProps> = () => {
  // –°—ä—Å—Ç–æ—è–Ω–∏—è –∑–∞ –∑–∞–¥—ä—Ä–∂–∞–Ω–µ –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏
  const [data, setData] = useState<DataType>({
    topRecommendationsReadlist: [] // –ó–∞–ø–∞–∑–µ–Ω–∏ –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ —á–µ—Ç–µ–Ω–µ
  });

  const [notification, setNotification] = useState<NotificationState | null>(
    null
  ); // –°—ä—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å—ä–æ–±—â–µ–Ω–∏—è –∑–∞ –≥—Ä–µ—à–∫–∏, —É—Å–ø–µ—Ö–∏ –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
  const [bookmarkedBooks, setBookmarkedBooks] = useState<{
    [key: string]: any;
  }>({});
  const [alertVisible, setAlertVisible] = useState(false); // To control alert visibility
  const [currentBookmarkStatus, setCurrentBookmarkStatus] = useState(false); // Track current bookmark status

  const [loading, setLoading] = useState<boolean>(true);
  const navigate = useNavigate();

  const handleNotificationClose = () => {
    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏—è—Ç–∞
    if (notification?.type === "error") {
      // –ê–∫–æ –∏–∑–≤–µ—Å—Ç–∏–µ—Ç–æ –µ –æ—Ç —Ç–∏–ø "–≥—Ä–µ—à–∫–∞", –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –≤—Ö–æ–¥
      navigate("/signin");
    }
    setNotification(null); // –ó–∞–Ω—É–ª—è–≤–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏–µ—Ç–æ
  };

  useEffect(() => {
    validateToken(setNotification); // –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

    const token =
      localStorage.getItem("authToken") || sessionStorage.getItem("authToken"); // –í–∑–µ–º–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç localStorage –∏–ª–∏ sessionStorage

    if (token) {
      setLoading(true);
      fetchData(token, setData, setLoading); // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ —Å –ø–æ–º–æ—â—Ç–∞ –Ω–∞ fetchData —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞
      console.log("fetching"); // –õ–æ–≥ –∑–∞ —Å–ª–µ–¥–µ–Ω–µ –Ω–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–∏
    }
  }, []);

  useEffect(() => {
    const loadBookmarkStatus = async () => {
      const token =
        localStorage.getItem("authToken") ||
        sessionStorage.getItem("authToken");

      if (token) {
        const updatedBookmarks: { [key: string]: any } = {};
        if (data.topRecommendationsReadlist) {
          for (const book of data.topRecommendationsReadlist) {
            try {
              const isBookmarked = await checkRecommendationExistsInReadlist(
                book.source === "GoogleBooks"
                  ? book.google_books_id
                  : book.goodreads_id,
                token,
                book.source
              );
              if (isBookmarked) {
                updatedBookmarks[
                  book.source === "GoogleBooks"
                    ? book.google_books_id
                    : book.goodreads_id
                ] = book;
              }
            } catch (error) {
              console.error("Error checking readlist status:", error);
            }
          }
        }
        setBookmarkedBooks(updatedBookmarks);
      }
    };

    loadBookmarkStatus();
  }, [data.topRecommendationsReadlist]);

  if (loading) {
    return (
      <FadeInWrapper loadingTimeout={30000}>
        <div></div>
      </FadeInWrapper>
    );
  }

  if (
    !data.topRecommendationsReadlist ||
    data.topRecommendationsReadlist.length === 0
  ) {
    return (
      <ErrorCard
        message="üîç –ó–∞ –¥–∞ –º–æ–∂–µ—Ç–µ –¥–∞ —Ä–∞–∑–≥–ª–µ–¥–∞—Ç–µ –í–∞—à–∏—Ç–µ —Å–ø–∏—Å—ä—Ü–∏, –º–æ–ª—è, –ø—ä—Ä–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–π—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏. 
          –¢–æ–≤–∞ —â–µ –Ω–∏ –ø–æ–∑–≤–æ–ª–∏ –¥–∞ —Å—ä–±–µ—Ä–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∏ –¥–∞ –í–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º 
          –ø–æ–¥—Ä–æ–±–µ–Ω –∞–Ω–∞–ª–∏–∑ üìä, —Å—ä–æ–±—Ä–∞–∑–µ–Ω —Å –í–∞—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è. ‚öôÔ∏è"
      />
    );
  }

  const handleDismiss = () => {
    setAlertVisible(false);
  };

  return (
    <FadeInWrapper>
      {notification && (
        <Notification
          message={notification.message}
          type={notification.type}
          onClose={handleNotificationClose}
        />
      )}
      {alertVisible && (
        <BookmarkAlert
          isBookmarked={currentBookmarkStatus}
          onDismiss={handleDismiss}
        />
      )}
      <Fragment>
        <div className="mt-[1.5rem]">
          <BooksTable
            data={data.topRecommendationsReadlist}
            setBookmarkedBooks={setBookmarkedBooks}
            setCurrentBookmarkStatus={setCurrentBookmarkStatus}
            setAlertVisible={setAlertVisible}
            bookmarkedBooks={bookmarkedBooks}
          />
        </div>
      </Fragment>
    </FadeInWrapper>
  );
};

export default Readlist;
