import { FC, Fragment, useEffect, useState } from "react";
import { DataType } from "./individualStats-types";
import {
  checkRecommendationExistsInWatchlist,
  checkTokenValidity,
  fetchData,
  handleBookmarkClick,
  removeFromWatchlist,
  saveToWatchlist
} from "./helper_functions";
import { useNavigate } from "react-router-dom";
import FadeInWrapper from "../../components/common/loader/fadeinwrapper";
import { showNotification } from "../recommendations/helper_functions";
import Notification from "../../components/common/notification/Notification";
import { NotificationState } from "../recommendations/recommendations-types";
import BookmarkAlert from "./Components/BookmarkAlert";
import AccordionItem from "./Components/AccordionItem";

interface IndividualStatsProps {}

const IndividualStats: FC<IndividualStatsProps> = () => {
  // –°—ä—Å—Ç–æ—è–Ω–∏—è –∑–∞ –∑–∞–¥—ä—Ä–∂–∞–Ω–µ –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏
  const [data, setData] = useState<DataType>({
    topRecommendations: {
      recommendationsCount: {
        movies: 0,
        series: 0
      },
      recommendations: []
    }, // –¢–æ–ø –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
    topRecommendationsWatchlist: {
      savedCount: {
        movies: 0,
        series: 0
      },
      watchlist: []
    }, // –ó–∞–ø–∞–∑–µ–Ω–∏ —Ñ–∏–ª–º–∏/—Å–µ—Ä–∏–∞–ª–∏ –≤ —Å–ø–∏—Å—ä–∫ –∑–∞ –≥–ª–µ–¥–∞–Ω–µ
    topGenres: [], // –¢–æ–ø –∂–∞–Ω—Ä–æ–≤–µ
    topGenresWatchlist: [], // –¢–æ–ø –∑–∞–ø–∞–∑–µ–Ω–∏ –∂–∞–Ω—Ä–æ–≤–µ
    sortedDirectorsByRecommendationCount: [], // –†–µ–∂–∏—Å—å–æ—Ä–∏, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ –ø—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç
    sortedActorsByRecommendationCount: [], // –ê–∫—Ç—å–æ—Ä–∏, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ –ø—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç
    sortedWritersByRecommendationCount: [], // –°—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∏, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ –ø—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç
    sortedDirectorsBySavedCount: [], // –†–µ–∂–∏—Å—å–æ—Ä–∏, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ –ø—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç
    sortedActorsBySavedCount: [], // –ê–∫—Ç—å–æ—Ä–∏, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ –ø—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç
    sortedWritersBySavedCount: [] // –°—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∏, —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –ø–æ –ø—Ä–æ—Å–ø–µ—Ä–∏—Ç–µ—Ç
  });

  const [notification, setNotification] = useState<NotificationState | null>(
    null
  ); // –°—ä—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å—ä–æ–±—â–µ–Ω–∏—è –∑–∞ –≥—Ä–µ—à–∫–∏, —É—Å–ø–µ—Ö–∏ –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
  const [bookmarkedMovies, setBookmarkedMovies] = useState<{
    [key: string]: any;
  }>({});
  const [alertVisible, setAlertVisible] = useState(false); // To control alert visibility
  const [currentBookmarkStatus, setCurrentBookmarkStatus] = useState(false); // Track current bookmark status

  const [loading, setLoading] = useState<boolean>(true);
  const navigate = useNavigate();

  const handleNotificationClose = () => {
    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏—è—Ç–∞
    if (notification?.type === "error") {
      // –ê–∫–æ –∏–∑–≤–µ—Å—Ç–∏–µ—Ç–æ –µ –æ—Ç —Ç–∏–ø "–≥—Ä–µ—à–∫–∞", –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –≤—Ö–æ–¥
      navigate("/signin");
    }
    setNotification(null); // –ó–∞–Ω—É–ª—è–≤–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏–µ—Ç–æ
  };

  useEffect(() => {
    const validateToken = async () => {
      // –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—è —Ç–æ–∫–µ–Ω
      const redirectUrl = await checkTokenValidity(); // –ò–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ –ø–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –≤–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω–∞
      if (redirectUrl) {
        // –ê–∫–æ —Ç–æ–∫–µ–Ω—ä—Ç –µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏–µ
        showNotification(
          setNotification, // –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏–µ
          "–í–∞—à–∞—Ç–∞ —Å–µ—Å–∏—è –µ –∏–∑—Ç–µ–∫–ª–∞. –ú–æ–ª—è, –≤–ª–µ–∑—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–∞ –í–∏ –æ—Ç–Ω–æ–≤–æ.", // –°—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –∏–∑–≤–µ—Å—Ç–∏–µ—Ç–æ
          "error" // –¢–∏–ø—ä—Ç –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏–µ—Ç–æ (–≥—Ä–µ—à–∫–∞)
        );
      }
    };

    validateToken(); // –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

    const token =
      localStorage.getItem("authToken") || sessionStorage.getItem("authToken"); // –í–∑–µ–º–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç localStorage –∏–ª–∏ sessionStorage

    if (token) {
      setLoading(true);
      fetchData(token, setData, setLoading); // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ —Å –ø–æ–º–æ—â—Ç–∞ –Ω–∞ fetchData —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞
      console.log("fetching"); // –õ–æ–≥ –∑–∞ —Å–ª–µ–¥–µ–Ω–µ –Ω–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–∏
    }
  }, []);

  useEffect(() => {
    const loadBookmarkStatus = async () => {
      const token =
        localStorage.getItem("authToken") ||
        sessionStorage.getItem("authToken");

      if (token) {
        const updatedBookmarks: { [key: string]: any } = {};
        if (data.topRecommendationsWatchlist.watchlist) {
          for (const movie of data.topRecommendationsWatchlist.watchlist) {
            try {
              const isBookmarked = await checkRecommendationExistsInWatchlist(
                movie.imdbID,
                token
              );
              if (isBookmarked) {
                updatedBookmarks[movie.imdbID] = movie;
              }
            } catch (error) {
              console.error("Error checking watchlist status:", error);
            }
          }
        }
        setBookmarkedMovies(updatedBookmarks);
      }
    };

    loadBookmarkStatus();
  }, [data.topRecommendationsWatchlist.watchlist]);

  if (loading) {
    return (
      <FadeInWrapper loadingTimeout={30000}>
        <div></div>
      </FadeInWrapper>
    );
  }

  if (
    !data.topRecommendations.recommendations ||
    data.topRecommendations.recommendations.length === 0 ||
    !data.topGenres.length ||
    !data.sortedDirectorsByRecommendationCount.length ||
    !data.sortedActorsByRecommendationCount.length ||
    !data.sortedWritersByRecommendationCount.length
  ) {
    return (
      <FadeInWrapper>
        <div className="flex justify-center items-center bg-bodybg mt-[15rem] text-center p-6 rounded-lg shadow-xl">
          <p className="text-2xl font-extrabold text-defaulttextcolor drop-shadow-lg">
            üîç –ó–∞ –¥–∞ –º–æ–∂–µ—Ç–µ –¥–∞ —Ä–∞–∑–≥–ª–µ–¥–∞—Ç–µ –í–∞—à–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –º–æ–ª—è,
            –ø—ä—Ä–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–π—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏. –¢–æ–≤–∞ —â–µ –Ω–∏ –ø–æ–∑–≤–æ–ª–∏ –¥–∞ —Å—ä–±–µ—Ä–µ–º
            –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∏ –¥–∞ –í–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–µ–Ω –∞–Ω–∞–ª–∏–∑ üìä, —Å—ä–æ–±—Ä–∞–∑–µ–Ω
            —Å –í–∞—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è. ‚öôÔ∏è
          </p>
        </div>
      </FadeInWrapper>
    );
  }

  const handleDismiss = () => {
    setAlertVisible(false);
  };

  return (
    <FadeInWrapper>
      {notification && (
        <Notification
          message={notification.message}
          type={notification.type}
          onClose={handleNotificationClose}
        />
      )}
      {alertVisible && (
        <BookmarkAlert
          isBookmarked={currentBookmarkStatus}
          onDismiss={handleDismiss}
        />
      )}
      <Fragment>
        <div className="md:flex block items-center justify-between my-[1.5rem] page-header-breadcrumb">
          <div>
            <p className="font-semibold text-[1.125rem] text-defaulttextcolor dark:text-defaulttextcolor/70 !mb-0 "></p>
          </div>
        </div>
        <div className="grid grid-cols-12 gap-6">
          <div className="xl:col-span-12 col-span-12">
            <div
              className="accordion accordionicon-left accordions-items-separate"
              id="accordioniconLeft"
            >
              <div
                className="hs-accordion-group"
                data-hs-accordion-always-open=""
              >
                <div
                  className="hs-accordion accordion-item overflow-hidden active"
                  id="hs-basic-with-title-and-arrow-stretched-heading-one"
                >
                  <AccordionItem
                    title="–ú–æ–∏—Ç–µ –¢–æ–ø –ü—Ä–µ–ø–æ—Ä—ä–∫–∏ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                    type="recommendations"
                    data={data}
                    handleBookmarkClick={handleBookmarkClick}
                    bookmarkedMovies={bookmarkedMovies}
                  />
                </div>
                {data.topRecommendationsWatchlist.watchlist ||
                data.topGenresWatchlist.length ||
                data.sortedDirectorsBySavedCount.length ||
                data.sortedActorsBySavedCount.length ||
                data.sortedWritersBySavedCount.length ? (
                  <AccordionItem
                    title="–ú–æ—è—Ç–∞ –ö–æ–ª–µ–∫—Ü–∏—è –∑–∞ –ì–ª–µ–¥–∞–Ω–µ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                    type="watchlist"
                    data={data}
                    handleBookmarkClick={handleBookmarkClick}
                    bookmarkedMovies={bookmarkedMovies}
                  />
                ) : null}
              </div>
            </div>
          </div>
        </div>
      </Fragment>
    </FadeInWrapper>
  );
};

export default IndividualStats;
